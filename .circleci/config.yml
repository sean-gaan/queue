# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
jobs:
  fix:
    docker:
      - image: circleci/php:7.4-node-browsers

    steps:
      - checkout

      - add_ssh_keys:
        fingerprints:
          - "64:7d:5a:39:a1:6f:7a:b1:be:f1:22:ec:76:ad:67:e9"

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      # prepare the database
      - run: cp .env.example .env
      - run: php artisan key:generate

      - run: ./vendor/bin/php-cs-fixer fix .
      - run: git config user.email "noreply@gaan.dev"
      - run: git config user.name "CircleCI"
      - run: git add .
      - run: git commit -m "CIRCLECI:Fixed Coding Standards. [skip ci]"
      - run: git push --set-upstream origin ${CIRCLE_BRANCH}

  test:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      # prepare the database
      - run: cp .env.example .env
      - run: php artisan key:generate

      # run tests with phpunit or codecept
      - run:
          command: |
            mkdir -p ~/phpunit
            ./vendor/bin/phpunit --log-junit ~/phpunit/junit.xml tests
          when: always
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit

workflows:
  version: 2
    - fix_and_test:
      jobs:
        - fix:
          filters:
            branches:
              ignore:
                - master
                - staging
        - test
